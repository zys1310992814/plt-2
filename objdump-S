
test:     file format elf32-i386


Disassembly of section .init:

08049000 <_init>:
 8049000:	53                   	push   %ebx
 8049001:	83 ec 08             	sub    $0x8,%esp
 8049004:	e8 c7 00 00 00       	call   80490d0 <__x86.get_pc_thunk.bx>
 8049009:	81 c3 eb 2f 00 00    	add    $0x2feb,%ebx
 804900f:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8049015:	85 c0                	test   %eax,%eax
 8049017:	74 02                	je     804901b <_init+0x1b>
 8049019:	ff d0                	call   *%eax
 804901b:	83 c4 08             	add    $0x8,%esp
 804901e:	5b                   	pop    %ebx
 804901f:	c3                   	ret

Disassembly of section .plt:

08049020 <__libc_start_main@plt-0x10>:
 8049020:	ff 35 f8 bf 04 08    	push   0x804bff8
 8049026:	ff 25 fc bf 04 08    	jmp    *0x804bffc
 804902c:	00 00                	add    %al,(%eax)
	...

08049030 <__libc_start_main@plt>:
 8049030:	ff 25 00 c0 04 08    	jmp    *0x804c000
 8049036:	68 00 00 00 00       	push   $0x0
 804903b:	e9 e0 ff ff ff       	jmp    8049020 <_init+0x20>

08049040 <printf@plt>:
 8049040:	ff 25 04 c0 04 08    	jmp    *0x804c004
 8049046:	68 08 00 00 00       	push   $0x8
 804904b:	e9 d0 ff ff ff       	jmp    8049020 <_init+0x20>

08049050 <test_a@plt>:
 8049050:	ff 25 08 c0 04 08    	jmp    *0x804c008
 8049056:	68 10 00 00 00       	push   $0x10
 804905b:	e9 c0 ff ff ff       	jmp    8049020 <_init+0x20>

08049060 <test_c@plt>:
 8049060:	ff 25 0c c0 04 08    	jmp    *0x804c00c
 8049066:	68 18 00 00 00       	push   $0x18
 804906b:	e9 b0 ff ff ff       	jmp    8049020 <_init+0x20>

08049070 <test_b@plt>:
 8049070:	ff 25 10 c0 04 08    	jmp    *0x804c010
 8049076:	68 20 00 00 00       	push   $0x20
 804907b:	e9 a0 ff ff ff       	jmp    8049020 <_init+0x20>

Disassembly of section .text:

08049080 <_start>:
 8049080:	31 ed                	xor    %ebp,%ebp
 8049082:	5e                   	pop    %esi
 8049083:	89 e1                	mov    %esp,%ecx
 8049085:	83 e4 f0             	and    $0xfffffff0,%esp
 8049088:	50                   	push   %eax
 8049089:	54                   	push   %esp
 804908a:	52                   	push   %edx
 804908b:	e8 19 00 00 00       	call   80490a9 <_start+0x29>
 8049090:	81 c3 64 2f 00 00    	add    $0x2f64,%ebx
 8049096:	6a 00                	push   $0x0
 8049098:	6a 00                	push   $0x0
 804909a:	51                   	push   %ecx
 804909b:	56                   	push   %esi
 804909c:	8d 83 b9 d0 ff ff    	lea    -0x2f47(%ebx),%eax
 80490a2:	50                   	push   %eax
 80490a3:	e8 88 ff ff ff       	call   8049030 <__libc_start_main@plt>
 80490a8:	f4                   	hlt
 80490a9:	8b 1c 24             	mov    (%esp),%ebx
 80490ac:	c3                   	ret

080490ad <__wrap_main>:
 80490ad:	e9 e4 00 00 00       	jmp    8049196 <main>
 80490b2:	66 90                	xchg   %ax,%ax
 80490b4:	66 90                	xchg   %ax,%ax
 80490b6:	66 90                	xchg   %ax,%ax
 80490b8:	66 90                	xchg   %ax,%ax
 80490ba:	66 90                	xchg   %ax,%ax
 80490bc:	66 90                	xchg   %ax,%ax
 80490be:	66 90                	xchg   %ax,%ax

080490c0 <_dl_relocate_static_pie>:
 80490c0:	f3 0f 1e fb          	endbr32
 80490c4:	c3                   	ret
 80490c5:	66 90                	xchg   %ax,%ax
 80490c7:	66 90                	xchg   %ax,%ax
 80490c9:	66 90                	xchg   %ax,%ax
 80490cb:	66 90                	xchg   %ax,%ax
 80490cd:	66 90                	xchg   %ax,%ax
 80490cf:	90                   	nop

080490d0 <__x86.get_pc_thunk.bx>:
 80490d0:	8b 1c 24             	mov    (%esp),%ebx
 80490d3:	c3                   	ret
 80490d4:	66 90                	xchg   %ax,%ax
 80490d6:	66 90                	xchg   %ax,%ax
 80490d8:	66 90                	xchg   %ax,%ax
 80490da:	66 90                	xchg   %ax,%ax
 80490dc:	66 90                	xchg   %ax,%ax
 80490de:	66 90                	xchg   %ax,%ax

080490e0 <deregister_tm_clones>:
 80490e0:	b8 20 c0 04 08       	mov    $0x804c020,%eax
 80490e5:	3d 20 c0 04 08       	cmp    $0x804c020,%eax
 80490ea:	74 24                	je     8049110 <deregister_tm_clones+0x30>
 80490ec:	b8 00 00 00 00       	mov    $0x0,%eax
 80490f1:	85 c0                	test   %eax,%eax
 80490f3:	74 1b                	je     8049110 <deregister_tm_clones+0x30>
 80490f5:	55                   	push   %ebp
 80490f6:	89 e5                	mov    %esp,%ebp
 80490f8:	83 ec 14             	sub    $0x14,%esp
 80490fb:	68 20 c0 04 08       	push   $0x804c020
 8049100:	ff d0                	call   *%eax
 8049102:	83 c4 10             	add    $0x10,%esp
 8049105:	c9                   	leave
 8049106:	c3                   	ret
 8049107:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
 804910e:	00 
 804910f:	90                   	nop
 8049110:	c3                   	ret
 8049111:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
 8049118:	00 
 8049119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08049120 <register_tm_clones>:
 8049120:	b8 20 c0 04 08       	mov    $0x804c020,%eax
 8049125:	2d 20 c0 04 08       	sub    $0x804c020,%eax
 804912a:	89 c2                	mov    %eax,%edx
 804912c:	c1 e8 1f             	shr    $0x1f,%eax
 804912f:	c1 fa 02             	sar    $0x2,%edx
 8049132:	01 d0                	add    %edx,%eax
 8049134:	d1 f8                	sar    $1,%eax
 8049136:	74 20                	je     8049158 <register_tm_clones+0x38>
 8049138:	ba 00 00 00 00       	mov    $0x0,%edx
 804913d:	85 d2                	test   %edx,%edx
 804913f:	74 17                	je     8049158 <register_tm_clones+0x38>
 8049141:	55                   	push   %ebp
 8049142:	89 e5                	mov    %esp,%ebp
 8049144:	83 ec 10             	sub    $0x10,%esp
 8049147:	50                   	push   %eax
 8049148:	68 20 c0 04 08       	push   $0x804c020
 804914d:	ff d2                	call   *%edx
 804914f:	83 c4 10             	add    $0x10,%esp
 8049152:	c9                   	leave
 8049153:	c3                   	ret
 8049154:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049158:	c3                   	ret
 8049159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08049160 <__do_global_dtors_aux>:
 8049160:	f3 0f 1e fb          	endbr32
 8049164:	80 3d 20 c0 04 08 00 	cmpb   $0x0,0x804c020
 804916b:	75 1b                	jne    8049188 <__do_global_dtors_aux+0x28>
 804916d:	55                   	push   %ebp
 804916e:	89 e5                	mov    %esp,%ebp
 8049170:	83 ec 08             	sub    $0x8,%esp
 8049173:	e8 68 ff ff ff       	call   80490e0 <deregister_tm_clones>
 8049178:	c6 05 20 c0 04 08 01 	movb   $0x1,0x804c020
 804917f:	c9                   	leave
 8049180:	c3                   	ret
 8049181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8049188:	c3                   	ret
 8049189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08049190 <frame_dummy>:
 8049190:	f3 0f 1e fb          	endbr32
 8049194:	eb 8a                	jmp    8049120 <register_tm_clones>

08049196 <main>:
#include "test_so.h"
int ggg = 1000;
int main(void)
{
 8049196:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 804919a:	83 e4 f0             	and    $0xfffffff0,%esp
 804919d:	ff 71 fc             	push   -0x4(%ecx)
 80491a0:	55                   	push   %ebp
 80491a1:	89 e5                	mov    %esp,%ebp
 80491a3:	53                   	push   %ebx
 80491a4:	51                   	push   %ecx
 80491a5:	83 ec 20             	sub    $0x20,%esp
 80491a8:	e8 23 ff ff ff       	call   80490d0 <__x86.get_pc_thunk.bx>
 80491ad:	81 c3 47 2e 00 00    	add    $0x2e47,%ebx
    int *sa=0x0804c00c;  //桩的地址
 80491b3:	c7 45 e4 0c c0 04 08 	movl   $0x804c00c,-0x1c(%ebp)
    int *sb=0x0804c010;  //桩的地址
 80491ba:	c7 45 e8 10 c0 04 08 	movl   $0x804c010,-0x18(%ebp)
    int *sc=0x0804c014;  //桩的地址
 80491c1:	c7 45 ec 14 c0 04 08 	movl   $0x804c014,-0x14(%ebp)
    int *sd=0x0804c018;  //桩的地址
 80491c8:	c7 45 f0 18 c0 04 08 	movl   $0x804c018,-0x10(%ebp)
    int *se=0x0804c01c;  //桩的地址
 80491cf:	c7 45 f4 1c c0 04 08 	movl   $0x804c01c,-0xc(%ebp)
	printf("The address of first call function printf@GLIBC_2.0 is %p\n",             *sa); //第1次调用时的地址
 80491d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80491d9:	8b 00                	mov    (%eax),%eax
 80491db:	83 ec 08             	sub    $0x8,%esp
 80491de:	50                   	push   %eax
 80491df:	8d 83 14 e0 ff ff    	lea    -0x1fec(%ebx),%eax
 80491e5:	50                   	push   %eax
 80491e6:	e8 55 fe ff ff       	call   8049040 <printf@plt>
 80491eb:	83 c4 10             	add    $0x10,%esp
	printf("The address of first call function test_a is %p\n",                       *sb); //第1次调用时的地址
 80491ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
 80491f1:	8b 00                	mov    (%eax),%eax
 80491f3:	83 ec 08             	sub    $0x8,%esp
 80491f6:	50                   	push   %eax
 80491f7:	8d 83 50 e0 ff ff    	lea    -0x1fb0(%ebx),%eax
 80491fd:	50                   	push   %eax
 80491fe:	e8 3d fe ff ff       	call   8049040 <printf@plt>
 8049203:	83 c4 10             	add    $0x10,%esp
    printf("The address of first call function test_c is %p\n",                       *sc); //第1次调用时的地址
 8049206:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8049209:	8b 00                	mov    (%eax),%eax
 804920b:	83 ec 08             	sub    $0x8,%esp
 804920e:	50                   	push   %eax
 804920f:	8d 83 84 e0 ff ff    	lea    -0x1f7c(%ebx),%eax
 8049215:	50                   	push   %eax
 8049216:	e8 25 fe ff ff       	call   8049040 <printf@plt>
 804921b:	83 c4 10             	add    $0x10,%esp
    printf("The address of first call function __libc_start_main@GLIBC_2.0 is %p\n",  *sb); //第1次调用时的地址
 804921e:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8049221:	8b 00                	mov    (%eax),%eax
 8049223:	83 ec 08             	sub    $0x8,%esp
 8049226:	50                   	push   %eax
 8049227:	8d 83 b8 e0 ff ff    	lea    -0x1f48(%ebx),%eax
 804922d:	50                   	push   %eax
 804922e:	e8 0d fe ff ff       	call   8049040 <printf@plt>
 8049233:	83 c4 10             	add    $0x10,%esp
    printf("The address of first call function test_b is %p\n",                       *se); //第1次调用时的地址
 8049236:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8049239:	8b 00                	mov    (%eax),%eax
 804923b:	83 ec 08             	sub    $0x8,%esp
 804923e:	50                   	push   %eax
 804923f:	8d 83 00 e1 ff ff    	lea    -0x1f00(%ebx),%eax
 8049245:	50                   	push   %eax
 8049246:	e8 f5 fd ff ff       	call   8049040 <printf@plt>
 804924b:	83 c4 10             	add    $0x10,%esp
    test_a();
 804924e:	e8 fd fd ff ff       	call   8049050 <test_a@plt>
    test_b();
 8049253:	e8 18 fe ff ff       	call   8049070 <test_b@plt>
    test_c();
 8049258:	e8 03 fe ff ff       	call   8049060 <test_c@plt>
	printf("The address of first call function printf@GLIBC_2.0 is %p\n",             *sa); //第1次调用时的地址
 804925d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8049260:	8b 00                	mov    (%eax),%eax
 8049262:	83 ec 08             	sub    $0x8,%esp
 8049265:	50                   	push   %eax
 8049266:	8d 83 14 e0 ff ff    	lea    -0x1fec(%ebx),%eax
 804926c:	50                   	push   %eax
 804926d:	e8 ce fd ff ff       	call   8049040 <printf@plt>
 8049272:	83 c4 10             	add    $0x10,%esp
	printf("The address of first call function test_a is %p\n",                       *sb); //第1次调用时的地址
 8049275:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8049278:	8b 00                	mov    (%eax),%eax
 804927a:	83 ec 08             	sub    $0x8,%esp
 804927d:	50                   	push   %eax
 804927e:	8d 83 50 e0 ff ff    	lea    -0x1fb0(%ebx),%eax
 8049284:	50                   	push   %eax
 8049285:	e8 b6 fd ff ff       	call   8049040 <printf@plt>
 804928a:	83 c4 10             	add    $0x10,%esp
    printf("The address of first call function test_c is %p\n",                       *sc); //第1次调用时的地址
 804928d:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8049290:	8b 00                	mov    (%eax),%eax
 8049292:	83 ec 08             	sub    $0x8,%esp
 8049295:	50                   	push   %eax
 8049296:	8d 83 84 e0 ff ff    	lea    -0x1f7c(%ebx),%eax
 804929c:	50                   	push   %eax
 804929d:	e8 9e fd ff ff       	call   8049040 <printf@plt>
 80492a2:	83 c4 10             	add    $0x10,%esp
    printf("The address of first call function __libc_start_main@GLIBC_2.0 is %p\n",  *sb); //第1次调用时的地址
 80492a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
 80492a8:	8b 00                	mov    (%eax),%eax
 80492aa:	83 ec 08             	sub    $0x8,%esp
 80492ad:	50                   	push   %eax
 80492ae:	8d 83 b8 e0 ff ff    	lea    -0x1f48(%ebx),%eax
 80492b4:	50                   	push   %eax
 80492b5:	e8 86 fd ff ff       	call   8049040 <printf@plt>
 80492ba:	83 c4 10             	add    $0x10,%esp
    printf("The address of first call function test_b is %p\n",                       *se); //第1次调用时的地址
 80492bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80492c0:	8b 00                	mov    (%eax),%eax
 80492c2:	83 ec 08             	sub    $0x8,%esp
 80492c5:	50                   	push   %eax
 80492c6:	8d 83 00 e1 ff ff    	lea    -0x1f00(%ebx),%eax
 80492cc:	50                   	push   %eax
 80492cd:	e8 6e fd ff ff       	call   8049040 <printf@plt>
 80492d2:	83 c4 10             	add    $0x10,%esp
    while(1);
 80492d5:	90                   	nop
 80492d6:	eb fd                	jmp    80492d5 <main+0x13f>

Disassembly of section .fini:

080492d8 <_fini>:
 80492d8:	53                   	push   %ebx
 80492d9:	83 ec 08             	sub    $0x8,%esp
 80492dc:	e8 ef fd ff ff       	call   80490d0 <__x86.get_pc_thunk.bx>
 80492e1:	81 c3 13 2d 00 00    	add    $0x2d13,%ebx
 80492e7:	83 c4 08             	add    $0x8,%esp
 80492ea:	5b                   	pop    %ebx
 80492eb:	c3                   	ret
